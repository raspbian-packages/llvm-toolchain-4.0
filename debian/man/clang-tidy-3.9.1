.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH CLANG-TIDY "1" "September 2016" "clang-tidy 3.9" "User Commands"
.SH NAME
clang-tidy \- manual page for clang-tidy 3.9
.SH DESCRIPTION
USAGE: clang\-tidy [subcommand] [options] <source0> [... <sourceN>]
.PP
OPTIONS:
.PP
Generic Options:
.HP
\fB\-help\fR                        \- Display available options (\fB\-help\-hidden\fR for more)
.HP
\fB\-help\-list\fR                   \- Display list of available options (\fB\-help\-list\-hidden\fR for more)
.HP
\fB\-version\fR                     \- Display the version of this program
.PP
clang\-tidy options:
.TP
\fB\-analyze\-temporary\-dtors\fR     \-
Enable temporary destructor\-aware analysis in
clang\-analyzer\- checks.
This option overrides the value read from a
\&.clang\-tidy file.
.TP
\fB\-checks=\fR<string>             \-
Comma\-separated list of globs with optional '\-'
prefix. Globs are processed in order of
appearance in the list. Globs without '\-'
prefix add checks with matching names to the
set, globs with the '\-' prefix remove checks
with matching names from the set of enabled
checks.  This option's value is appended to the
value of the 'Checks' option in .clang\-tidy
file, if any.
.TP
\fB\-config=\fR<string>             \-
Specifies a configuration in YAML/JSON format:
.TP
\fB\-config=\fR"{Checks: '*',
CheckOptions: [{key: x,
.TP
value: y}]}"
When the value is empty, clang\-tidy will
attempt to find a file named .clang\-tidy for
each source file in its parent directories.
.TP
\fB\-dump\-config\fR                 \-
Dumps configuration in the YAML format to
stdout. This option can be used along with a
file name (and '\-\-' if the file is outside of a
project with configured compilation database).
The configuration used for this file will be
printed.
Use along with \fB\-checks=\fR* to include
configuration of all checks.
.TP
\fB\-enable\-check\-profile\fR        \-
Enable per\-check timing profiles, and print a
report to stderr.
.TP
\fB\-explain\-config\fR              \-
for each enabled check explains, where it is enabled, i.e. in clang\-tidy binary,
command line or a specific configuration file.
.TP
\fB\-export\-fixes=\fR<filename>     \-
YAML file to store suggested fixes in. The
stored fixes can be applied to the input sorce
code with clang\-apply\-replacements.
.HP
\fB\-extra\-arg=\fR<string>          \- Additional argument to append to the compiler command line
.HP
\fB\-extra\-arg\-before=\fR<string>   \- Additional argument to prepend to the compiler command line
.TP
\fB\-fix\fR                         \-
Apply suggested fixes. Without \fB\-fix\-errors\fR
clang\-tidy will bail out if any compilation
errors were found.
.TP
\fB\-fix\-errors\fR                  \-
Apply suggested fixes even if compilation
errors were found. If compiler errors have
attached fix\-its, clang\-tidy will apply them as
well.
.TP
\fB\-header\-filter=\fR<string>      \-
Regular expression matching the names of the
headers to output diagnostics from. Diagnostics
from the main file of each translation unit are
always displayed.
Can be used together with \fB\-line\-filter\fR.
This option overrides the 'HeaderFilter' option
in .clang\-tidy file, if any.
.TP
\fB\-line\-filter=\fR<string>        \-
List of files with line ranges to filter the
warnings. Can be used together with
\fB\-header\-filter\fR. The format of the list is a
JSON array of objects:
.TP
[
{"name":"file1.cpp","lines":[[1,3],[5,7]]},
{"name":"file2.h"}
.IP
]
.TP
\fB\-list\-checks\fR                 \-
List all enabled checks and exit. Use with
\fB\-checks=\fR* to list all available checks.
.HP
\fB\-p=\fR<string>                  \- Build path
.HP
\fB\-system\-headers\fR              \- Display the errors from system headers.
.TP
\fB\-warnings\-as\-errors=\fR<string> \-
Upgrades warnings to errors. Same format as
\&'\-checks'.
This option's value is appended to the value of
the 'WarningsAsErrors' option in .clang\-tidy
file, if any.
.PP
\fB\-p\fR <build\-path> is used to read a compile command database.
.IP
For example, it can be a CMake build directory in which a file named
compile_commands.json exists (use \fB\-DCMAKE_EXPORT_COMPILE_COMMANDS\fR=\fI\,ON\/\fR
CMake option to get this output). When no build path is specified,
a search for compile_commands.json will be attempted through all
parent paths of the first input file . See:
http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html for an
example of setting up Clang Tooling on a source tree.
.PP
<source0> ... specify the paths of source files. These paths are
.IP
looked up in the compile command database. If the path of a file is
absolute, it needs to point into CMake's source tree. If the path is
relative, the current working directory needs to be in the CMake
source tree and the file must be in a subdirectory of the current
working directory. "./" prefixes in the relative files will be
automatically removed, but the rest of a relative path must be a
suffix of a path in the compile command database.
.SS "Configuration files:"
.IP
clang\-tidy attempts to read configuration for each source file from a
\&.clang\-tidy file located in the closest parent directory of the source
file. If any configuration options have a corresponding command\-line
option, command\-line option takes precedence. The effective
configuration can be inspected using \fB\-dump\-config\fR:
.IP
\f(CW$ clang-tidy -dump-config - --\fR
.HP
\fB\-\-\-\fR
.TP
Checks:
\&'\-*,some\-check'
.IP
WarningsAsErrors: ''
HeaderFilterRegex: ''
AnalyzeTemporaryDtors: false
User:            user
CheckOptions:
.TP
\- key:
some\-check.SomeOption
.TP
value:
\&'some value'
.IP
\&...
.SH "SEE ALSO"
The full documentation for
.B clang-tidy
is maintained as a Texinfo manual.  If the
.B info
and
.B clang-tidy
programs are properly installed at your site, the command
.IP
.B info clang-tidy
.PP
should give you access to the complete manual.
