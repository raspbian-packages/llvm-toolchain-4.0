.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH CLANG "1" "September 2016" "clang 3.9" "User Commands"
.SH NAME
clang \- manual page for clang 3.9
.SH DESCRIPTION
OVERVIEW: clang LLVM compiler
.PP
USAGE: clang\-3.9 [options] <inputs>
.SS "OPTIONS:"
.TP
\-###
Print (but do not run) the commands to run for this compilation
.TP
\fB\-\-analyze\fR
Run the static analyzer
.TP
\fB\-arcmt\-migrate\-emit\-errors\fR
Emit ARC errors even if the migrator can fix them
.TP
\fB\-arcmt\-migrate\-report\-output\fR <value>
Output path for the plist report
.TP
\fB\-cl\-denorms\-are\-zero\fR
OpenCL only. Allow denormals to be flushed to zero.
.TP
\fB\-cl\-fast\-relaxed\-math\fR
OpenCL only. Sets \fB\-cl\-finite\-math\-only\fR and \fB\-cl\-unsafe\-math\-optimizations\fR, and defines __FAST_RELAXED_MATH__.
.TP
\fB\-cl\-finite\-math\-only\fR
OpenCL only. Allow floating\-point optimizations that assume arguments and results are not NaNs or +\-Inf.
.TP
\fB\-cl\-kernel\-arg\-info\fR
OpenCL only. Generate kernel argument metadata.
.TP
\fB\-cl\-mad\-enable\fR
OpenCL only. Allow use of less precise MAD computations in the generated binary.
.TP
\fB\-cl\-no\-signed\-zeros\fR
OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
.TP
\fB\-cl\-opt\-disable\fR
OpenCL only. This option disables all optimizations. By default optimizations are enabled.
.TP
\fB\-cl\-single\-precision\-constant\fR
OpenCL only. Treat double precision floating\-point constant as single precision constant.
.TP
\fB\-cl\-std=\fR<value>
OpenCL language standard to compile for.
.TP
\fB\-cl\-strict\-aliasing\fR
OpenCL only. This option is added for compatibility with OpenCL 1.0.
.TP
\fB\-cl\-unsafe\-math\-optimizations\fR
OpenCL only. Allow unsafe floating\-point optimizations.  Also implies \fB\-cl\-no\-signed\-zeros\fR and \fB\-cl\-mad\-enable\fR.
.TP
\fB\-\-cuda\-compile\-host\-device\fR
Compile CUDA code for both host and device (default).  Has no effect on non\-CUDA compilations.
.TP
\fB\-\-cuda\-device\-only\fR
Compile CUDA code for device only
.TP
\fB\-\-cuda\-gpu\-arch=\fR<value> CUDA GPU architecture (e.g. sm_35).
May be specified more than once.
.TP
\fB\-\-cuda\-host\-only\fR
Compile CUDA code for host only.  Has no effect on non\-CUDA compilations.
.TP
\fB\-\-cuda\-noopt\-device\-debug\fR
Enable device\-side debug info generation. Disables ptxas optimizations.
.TP
\fB\-\-cuda\-path=\fR<value>
CUDA installation path
.TP
\fB\-cxx\-isystem\fR <directory>
Add directory to the C++ SYSTEM include search path
.TP
\fB\-c\fR
Only run preprocess, compile, and assemble steps
.TP
\fB\-dD\fR
Print macro definitions in \fB\-E\fR mode in addition to normal output
.HP
\fB\-dependency\-dot\fR <value> Filename to write DOT\-formatted header dependencies to
.TP
\fB\-dependency\-file\fR <value>
Filename (or \-) to write dependency output to
.TP
\fB\-dM\fR
Print macro definitions in \fB\-E\fR mode instead of normal output
.TP
\fB\-emit\-ast\fR
Emit Clang AST files for source inputs
.TP
\fB\-emit\-llvm\fR
Use the LLVM representation for assembler and object files
.TP
\fB\-E\fR
Only run the preprocessor
.TP
\fB\-faltivec\fR
Enable AltiVec vector initializer syntax
.TP
\fB\-fansi\-escape\-codes\fR
Use ANSI escape codes for diagnostics
.TP
\fB\-fapple\-kext\fR
Use Apple's kernel extensions ABI
.TP
\fB\-fapple\-pragma\-pack\fR
Enable Apple gcc\-compatible #pragma pack handling
.HP
\fB\-fapplication\-extension\fR Restrict code to those available for App Extensions
.TP
\fB\-fblocks\fR
Enable the 'blocks' language feature
.TP
\fB\-fborland\-extensions\fR
Accept non\-standard constructs supported by the Borland compiler
.TP
\fB\-fbuild\-session\-file=\fR<file>
Use the last modification time of <file> as the build session timestamp
.TP
\fB\-fbuild\-session\-timestamp=\fR<time since Epoch in seconds>
Time when the current build session started
.TP
\fB\-fcolor\-diagnostics\fR
Use colors in diagnostics
.TP
\fB\-fcomment\-block\-commands=\fR<arg>
Treat each comma separated argument in <arg> as a documentation comment block command
.TP
\fB\-fcoverage\-mapping\fR
Generate coverage mapping to enable code coverage analysis
.TP
\fB\-fcuda\-approx\-transcendentals\fR
Use approximate transcendental functions
.TP
\fB\-fcuda\-flush\-denormals\-to\-zero\fR
Flush denormal floating point values to zero in CUDA device mode.
.TP
\fB\-fcxx\-exceptions\fR
Enable C++ exceptions
.TP
\fB\-fdata\-sections\fR
Place each data in its own section (ELF Only)
.TP
\fB\-fdebug\-prefix\-map=\fR<value>
remap file source paths in debug info
.TP
\fB\-fdebug\-types\-section\fR
Place debug types in their own section (ELF Only)
.TP
\fB\-fdeclspec\fR
Allow __declspec as a keyword
.TP
\fB\-fdelayed\-template\-parsing\fR
Parse templated function definitions at the end of the translation unit
.TP
\fB\-fdiagnostics\-parseable\-fixits\fR
Print fix\-its in machine parseable form
.TP
\fB\-fdiagnostics\-print\-source\-range\-info\fR
Print source range spans in numeric form
.TP
\fB\-fdiagnostics\-show\-note\-include\-stack\fR
Display include stacks for diagnostic notes
.TP
\fB\-fdiagnostics\-show\-option\fR
Print option name with mappable diagnostics
.TP
\fB\-fdiagnostics\-show\-template\-tree\fR
Print a template comparison tree for differing templates
.TP
\fB\-fdollars\-in\-identifiers\fR
Allow '$' in identifiers
.TP
\fB\-fembed\-bitcode\-marker\fR
Embed placeholder LLVM IR data as a marker
.TP
\fB\-fembed\-bitcode=\fR<option>
Embed LLVM bitcode (option: off, all, bitcode, marker)
.TP
\fB\-fembed\-bitcode\fR
Embed LLVM IR bitcode as data
.TP
\fB\-femit\-all\-decls\fR
Emit all declarations, even if unused
.TP
\fB\-femulated\-tls\fR
Use emutls functions to access thread_local variables
.TP
\fB\-fexceptions\fR
Enable support for exception handling
.TP
\fB\-ffast\-math\fR
Allow aggressive, lossy floating\-point optimizations
.TP
\fB\-ffixed\-r9\fR
Reserve the r9 register (ARM only)
.TP
\fB\-ffixed\-x18\fR
Reserve the x18 register (AArch64 only)
.TP
\fB\-ffp\-contract=\fR<value>
Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)
.TP
\fB\-ffreestanding\fR
Assert that the compilation takes place in a freestanding environment
.TP
\fB\-ffunction\-sections\fR
Place each function in its own section (ELF Only)
.TP
\fB\-fgnu\-keywords\fR
Allow GNU\-extension keywords regardless of language standard
.TP
\fB\-fgnu\-runtime\fR
Generate output compatible with the standard GNU Objective\-C runtime
.TP
\fB\-fgnu89\-inline\fR
Use the gnu89 inline semantics
.TP
\fB\-fimplicit\-module\-maps\fR
Implicitly search the file system for module map files.
.TP
\fB\-finline\-functions\fR
Inline suitable functions
.HP
\fB\-finline\-hint\-functions\fR Inline functions wich are (explicitly or implicitly) marked inline
.TP
\fB\-finstrument\-functions\fR
Generate calls to instrument function entry and exit
.TP
\fB\-fintegrated\-as\fR
Enable the integrated assembler
.TP
\fB\-flto=\fR<value>
Set LTO mode to either 'full' or 'thin'
.TP
\fB\-flto\fR
Enable LTO in 'full' mode
.TP
\fB\-fmath\-errno\fR
Require math functions to indicate errors by setting errno
.TP
\fB\-fmax\-type\-align=\fR<value>
Specify the maximum alignment to enforce on pointers lacking an explicit alignment
.TP
\fB\-fmodule\-file=\fR<file>
Load this precompiled module file
.TP
\fB\-fmodule\-map\-file=\fR<file>
Load this module map file
.TP
\fB\-fmodule\-name=\fR<name>
Specify the name of the module to build
.TP
\fB\-fmodules\-cache\-path=\fR<directory>
Specify the module cache path
.TP
\fB\-fmodules\-decluse\fR
Require declaration of modules used within a module
.TP
\fB\-fmodules\-ignore\-macro=\fR<value>
Ignore the definition of the given macro when building and loading modules
.TP
\fB\-fmodules\-prune\-after=\fR<seconds>
Specify the interval (in seconds) after which a module file will be considered unused
.TP
\fB\-fmodules\-prune\-interval=\fR<seconds>
Specify the interval (in seconds) between attempts to prune the module cache
.TP
\fB\-fmodules\-search\-all\fR
Search even non\-imported modules to resolve references
.TP
\fB\-fmodules\-strict\-decluse\fR
Like \fB\-fmodules\-decluse\fR but requires all headers to be in modules
.TP
\fB\-fmodules\-user\-build\-path\fR <directory>
Specify the module user build path
.TP
\fB\-fmodules\-validate\-once\-per\-build\-session\fR
Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
.TP
\fB\-fmodules\-validate\-system\-headers\fR
Validate the system headers that a module depends on when loading the module
.TP
\fB\-fmodules\fR
Enable the 'modules' language feature
.TP
\fB\-fms\-compatibility\-version=\fR<value>
Dot\-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
.TP
\fB\-fms\-compatibility\fR
Enable full Microsoft Visual C++ compatibility
.TP
\fB\-fms\-extensions\fR
Accept some non\-standard constructs supported by the Microsoft compiler
.TP
\fB\-fmsc\-version=\fR<value>
Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
.TP
\fB\-fno\-access\-control\fR
Disable C++ access control
.TP
\fB\-fno\-assume\-sane\-operator\-new\fR
Don't assume that C++'s global operator new can't alias any pointer
.TP
\fB\-fno\-autolink\fR
Disable generation of linker directives for automatic library linking
.TP
\fB\-fno\-builtin\-\fR<value>
Disable implicit builtin knowledge of a specific function
.TP
\fB\-fno\-builtin\fR
Disable implicit builtin knowledge of functions
.TP
\fB\-fno\-common\fR
Compile common globals like normal definitions
.HP
\fB\-fno\-constant\-cfstrings\fR Disable creation of CodeFoundation\-type constant strings
.TP
\fB\-fno\-coverage\-mapping\fR
Disable code coverage analysis
.TP
\fB\-fno\-declspec\fR
Disallow __declspec as a keyword
.TP
\fB\-fno\-diagnostics\-fixit\-info\fR
Do not include fixit information in diagnostics
.TP
\fB\-fno\-dollars\-in\-identifiers\fR
Disallow '$' in identifiers
.HP
\fB\-fno\-elide\-constructors\fR Disable C++ copy constructor elision
.TP
\fB\-fno\-elide\-type\fR
Do not elide types when printing diagnostics
.TP
\fB\-fno\-gnu\-inline\-asm\fR
Disable GNU style inline asm
.TP
\fB\-fno\-integrated\-as\fR
Disable the integrated assembler
.TP
\fB\-fno\-jump\-tables\fR
Do not use jump tables for lowering switches
.TP
\fB\-fno\-lax\-vector\-conversions\fR
Disallow implicit conversions between vectors with a different number of elements or different element types
.TP
\fB\-fno\-lto\fR
Disable LTO mode (default)
.TP
\fB\-fno\-merge\-all\-constants\fR
Disallow merging of constants
.TP
\fB\-fno\-objc\-infer\-related\-result\-type\fR
do not infer Objective\-C related result type based on method family
.TP
\fB\-fno\-operator\-names\fR
Do not treat C++ operator name keywords as synonyms for operators
.TP
\fB\-fno\-profile\-generate\fR
Disable generation of profile instrumentation.
.TP
\fB\-fno\-profile\-instr\-generate\fR
Disable generation of profile instrumentation.
.TP
\fB\-fno\-profile\-instr\-use\fR
Disable using instrumentation data for profile\-guided optimization
.TP
\fB\-fno\-reroll\-loops\fR
Turn off loop reroller
.TP
\fB\-fno\-rtti\fR
Disable generation of rtti information
.HP
\fB\-fno\-sanitize\-blacklist\fR Don't use blacklist file for sanitizers
.TP
\fB\-fno\-sanitize\-cfi\-cross\-dso\fR
Disable control flow integrity (CFI) checks for cross\-DSO calls.
.TP
\fB\-fno\-sanitize\-coverage=\fR<value>
Disable specified features of coverage instrumentation for Sanitizers
.TP
\fB\-fno\-sanitize\-memory\-track\-origins\fR
Disable origins tracking in MemorySanitizer
.TP
\fB\-fno\-sanitize\-recover=\fR<value>
Disable recovery for specified sanitizers
.TP
\fB\-fno\-sanitize\-stats\fR
Disable sanitizer statistics gathering.
.TP
\fB\-fno\-sanitize\-trap=\fR<value>
Disable trapping for specified sanitizers
.TP
\fB\-fno\-short\-wchar\fR
Force wchar_t to be an unsigned int
.TP
\fB\-fno\-show\-column\fR
Do not include column number on diagnostics
.TP
\fB\-fno\-show\-source\-location\fR
Do not include source location information with diagnostics
.TP
\fB\-fno\-signed\-char\fR
Char is unsigned
.TP
\fB\-fno\-signed\-zeros\fR
Allow optimizations that ignore the sign of floating point zeros
.TP
\fB\-fno\-spell\-checking\fR
Disable spell\-checking
.TP
\fB\-fno\-stack\-protector\fR
Disable the use of stack protectors
.TP
\fB\-fno\-standalone\-debug\fR
Limit debug information produced to reduce size of debug binary
.HP
\fB\-fno\-threadsafe\-statics\fR Do not emit code to make initialization of local statics thread safe
.TP
\fB\-fno\-trigraphs\fR
Do not process trigraph sequences
.TP
\fB\-fno\-unroll\-loops\fR
Turn off loop unroller
.TP
\fB\-fno\-use\-cxa\-atexit\fR
Don't use __cxa_atexit for calling destructors
.TP
\fB\-fno\-use\-init\-array\fR
Don't use .init_array instead of .ctors
.TP
\fB\-fobjc\-arc\-exceptions\fR
Use EH\-safe code when synthesizing retains and releases in \fB\-fobjc\-arc\fR
.TP
\fB\-fobjc\-arc\fR
Synthesize retain and release calls for Objective\-C pointers
.TP
\fB\-fobjc\-exceptions\fR
Enable Objective\-C exceptions
.TP
\fB\-fobjc\-gc\-only\fR
Use GC exclusively for Objective\-C related memory management
.TP
\fB\-fobjc\-gc\fR
Enable Objective\-C garbage collection
.TP
\fB\-fobjc\-runtime=\fR<value>
Specify the target Objective\-C runtime kind and version
.TP
\fB\-fobjc\-weak\fR
Enable ARC\-style weak references in Objective\-C
.TP
\fB\-fopenmp\-targets=\fR<value>
Specify comma\-separated list of triples OpenMP offloading targets to be supported
.TP
\fB\-fpack\-struct=\fR<value>
Specify the default maximum struct packing alignment
.TP
\fB\-fpascal\-strings\fR
Recognize and construct Pascal\-style string literals
.TP
\fB\-fpcc\-struct\-return\fR
Override the default ABI to return all structs on the stack
.TP
\fB\-fplugin=\fR<dsopath>
Load the named plugin (dynamic shared object)
.TP
\fB\-fprofile\-generate=\fR<directory>
Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
.TP
\fB\-fprofile\-generate\fR
Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
.TP
\fB\-fprofile\-instr\-generate=\fR<file>
Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
.TP
\fB\-fprofile\-instr\-generate\fR
Generate instrumented code to collect execution counts into default.profraw file (overriden by '=' form of option or LLVM_PROFILE_FILE env var)
.TP
\fB\-fprofile\-instr\-use=\fR<value>
Use instrumentation data for profile\-guided optimization
.TP
\fB\-fprofile\-sample\-use=\fR<value>
Enable sample\-based profile guided optimizations
.TP
\fB\-fprofile\-use=\fR<pathname>
Use instrumentation data for profile\-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
.TP
\fB\-freciprocal\-math\fR
Allow division operations to be reassociated
.TP
\fB\-freg\-struct\-return\fR
Override the default ABI to return small structs in registers
.TP
\fB\-freroll\-loops\fR
Turn on loop reroller
.TP
\fB\-fsanitize\-address\-field\-padding=\fR<value>
Level of field padding for AddressSanitizer
.TP
\fB\-fsanitize\-address\-use\-after\-scope\fR
Enable use\-after\-scope detection in AddressSanitizer
.TP
\fB\-fsanitize\-blacklist=\fR<value>
Path to blacklist file for sanitizers
.TP
\fB\-fsanitize\-cfi\-cross\-dso\fR
Enable control flow integrity (CFI) checks for cross\-DSO calls.
.TP
\fB\-fsanitize\-coverage=\fR<value>
Specify the type of coverage instrumentation for Sanitizers
.TP
\fB\-fsanitize\-memory\-track\-origins=\fR<value>
Enable origins tracking in MemorySanitizer
.TP
\fB\-fsanitize\-memory\-track\-origins\fR
Enable origins tracking in MemorySanitizer
.TP
\fB\-fsanitize\-memory\-use\-after\-dtor\fR
Enable use\-after\-destroy detection in MemorySanitizer
.TP
\fB\-fsanitize\-recover=\fR<value>
Enable recovery for specified sanitizers
.TP
\fB\-fsanitize\-stats\fR
Enable sanitizer statistics gathering.
.HP
\fB\-fsanitize\-trap=\fR<value> Enable trapping for specified sanitizers
.TP
\fB\-fsanitize\-undefined\-strip\-path\-components=\fR<number>
Strip (or keep only, if negative) a given number of path components when emitting check metadata.
.TP
\fB\-fsanitize=\fR<check>
Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
.TP
\fB\-fshort\-enums\fR
Allocate to an enum type only as many bytes as it needs for the declared range of possible values
.TP
\fB\-fshort\-wchar\fR
Force wchar_t to be a short unsigned int
.TP
\fB\-fshow\-overloads=\fR<value>
Which overload candidates to show when overload resolution fails: best|all; defaults to all
.TP
\fB\-fsized\-deallocation\fR
Enable C++14 sized global deallocation functions
.TP
\fB\-fsjlj\-exceptions\fR
Use SjLj style exceptions
.TP
\fB\-fslp\-vectorize\-aggressive\fR
Enable the BB vectorization passes
.TP
\fB\-fslp\-vectorize\fR
Enable the superword\-level parallelism vectorization passes
.TP
\fB\-fstack\-protector\-all\fR
Force the usage of stack protectors for all functions
.TP
\fB\-fstack\-protector\-strong\fR
Use a strong heuristic to apply stack protectors to functions
.TP
\fB\-fstack\-protector\fR
Enable stack protectors for functions potentially vulnerable to stack smashing
.TP
\fB\-fstandalone\-debug\fR
Emit full debug info for all types used by the program
.TP
\fB\-fstrict\-enums\fR
Enable optimizations based on the strict definition of an enum's value range
.TP
\fB\-fstrict\-vtable\-pointers\fR
Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
.HP
\fB\-fthinlto\-index=\fR<value> Perform ThinLTO importing using provided function summary index
.HP
\fB\-ftrap\-function=\fR<value> Issue call to specified function rather than a trap instruction
.TP
\fB\-ftrapv\-handler=\fR<function name>
Specify the function to be called on overflow
.TP
\fB\-ftrapv\fR
Trap on integer overflow
.TP
\fB\-ftrigraphs\fR
Process trigraph sequences
.TP
\fB\-funique\-section\-names\fR
Use unique names for text and data sections (ELF Only)
.TP
\fB\-funroll\-loops\fR
Turn on loop unroller
.TP
\fB\-fuse\-init\-array\fR
Use .init_array instead of .ctors
.TP
\fB\-fveclib=\fR<value>
Use the given vector functions library
.TP
\fB\-fvectorize\fR
Enable the loop vectorization passes
.TP
\fB\-fvisibility\-inlines\-hidden\fR
Give inline C++ member functions default visibility by default
.TP
\fB\-fvisibility\-ms\-compat\fR
Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
.TP
\fB\-fvisibility=\fR<value>
Set the default symbol visibility for all global declarations
.HP
\fB\-fwhole\-program\-vtables\fR Enables whole\-program vtable optimization. Requires \fB\-flto\fR
.TP
\fB\-fwrapv\fR
Treat signed integer overflow as two's complement
.TP
\fB\-fwritable\-strings\fR
Store string literals as writable data
.TP
\fB\-fxray\-instruction\-threshold=\fR <value>
Sets the minimum function size to instrument with XRay
.TP
\fB\-fxray\-instrument\fR
Generate XRay instrumentation sleds on function entry and exit
.TP
\fB\-fzvector\fR
Enable System z vector language extension
.TP
\fB\-F\fR <value>
Add directory to framework include search path
.HP
\fB\-\-gcc\-toolchain=\fR<value> Use the gcc toolchain at the given directory
.TP
\fB\-gcodeview\fR
Generate CodeView debug information
.TP
\fB\-gdwarf\-2\fR
Generate source\-level debug information with dwarf version 2
.TP
\fB\-gdwarf\-3\fR
Generate source\-level debug information with dwarf version 3
.TP
\fB\-gdwarf\-4\fR
Generate source\-level debug information with dwarf version 4
.TP
\fB\-gdwarf\-5\fR
Generate source\-level debug information with dwarf version 5
.TP
\fB\-gline\-tables\-only\fR
Emit debug line number tables only
.TP
\fB\-gmodules\fR
Generate debug info with external references to clang modules or precompiled headers
.TP
\fB\-g\fR
Generate source\-level debug information
.TP
\fB\-help\fR
Display available options
.TP
\fB\-H\fR
Show header includes and nesting depth
.TP
\fB\-idirafter\fR <value>
Add directory to AFTER include search path
.TP
\fB\-iframework\fR <value>
Add directory to SYSTEM framework search path
.TP
\fB\-imacros\fR <file>
Include macros from file before parsing
.TP
\fB\-include\-pch\fR <file>
Include precompiled header file
.TP
\fB\-include\fR <file>
Include file before parsing
.TP
\fB\-index\-header\-map\fR
Make the next included directory (\fB\-I\fR or \fB\-F\fR) an indexer header map
.TP
\fB\-iprefix\fR <dir>
Set the \fB\-iwithprefix\fR/\-iwithprefixbefore prefix
.TP
\fB\-iquote\fR <directory>
Add directory to QUOTE include search path
.TP
\fB\-isysroot\fR <dir>
Set the system root directory (usually /)
.TP
\fB\-isystem\-after\fR <directory>
Add directory to end of the SYSTEM include search path
.TP
\fB\-isystem\fR <directory>
Add directory to SYSTEM include search path
.TP
\fB\-ivfsoverlay\fR <value>
Overlay the virtual filesystem described by file over the real file system
.TP
\fB\-iwithprefixbefore\fR <dir>
Set directory to include search path with prefix
.TP
\fB\-iwithprefix\fR <dir>
Set directory to SYSTEM include search path with prefix
.TP
\fB\-iwithsysroot\fR <directory>
Add directory to SYSTEM include search path, absolute paths are relative to \fB\-isysroot\fR
.TP
\fB\-I\fR <value>
Add directory to include search path
.TP
\fB\-mabicalls\fR
Enable SVR4\-style position\-independent code (Mips only)
.TP
\fB\-malign\-double\fR
Align doubles to two words in structs (x86 only)
.TP
\fB\-mbackchain\fR
Link stack frames through backchain on System Z
.TP
\fB\-mcrc\fR
Allow use of CRC instructions (ARM only)
.TP
\fB\-MD\fR
Write a depfile containing user and system headers
.TP
\fB\-meabi\fR <value>
Set EABI type, e.g. 4, 5 or gnu (default depends on triple)
.HP
\fB\-mfix\-cortex\-a53\-835769\fR Workaround Cortex\-A53 erratum 835769 (AArch64 only)
.TP
\fB\-mfp32\fR
Use 32\-bit floating point registers (MIPS only)
.TP
\fB\-mfp64\fR
Use 64\-bit floating point registers (MIPS only)
.TP
\fB\-MF\fR <file>
Write depfile output from \fB\-MMD\fR, \fB\-MD\fR, \fB\-MM\fR, or \fB\-M\fR to <file>
.TP
\fB\-mgeneral\-regs\-only\fR
Generate code which only uses the general purpose registers (AArch64 only)
.TP
\fB\-mglobal\-merge\fR
Enable merging of globals
.TP
\fB\-MG\fR
Add missing headers to depfile
.TP
\fB\-mhvx\-double\fR
Enable Hexagon Double Vector eXtensions
.TP
\fB\-mhvx\fR
Enable Hexagon Vector eXtensions
.TP
\fB\-miamcu\fR
Use Intel MCU ABI
.TP
\fB\-\-migrate\fR
Run the migrator
.TP
\fB\-mincremental\-linker\-compatible\fR
(integrated\-as) Emit an object file which can be used with an incremental linker
.TP
\fB\-mios\-version\-min=\fR<value>
Set iOS deployment target
.TP
\fB\-mllvm\fR <value>
Additional arguments to forward to LLVM's option processing
.TP
\fB\-mlong\-calls\fR
Generate an indirect jump to enable jumps further than 64M
.TP
\fB\-mmacosx\-version\-min=\fR<value>
Set Mac OS X deployment target
.TP
\fB\-MMD\fR
Write a depfile containing user headers
.TP
\fB\-mms\-bitfields\fR
Set the default structure layout to be compatible with the Microsoft compiler standard
.TP
\fB\-mmsa\fR
Enable MSA ASE (MIPS only)
.TP
\fB\-MM\fR
Like \fB\-MMD\fR, but also implies \fB\-E\fR and writes to stdout by default
.TP
\fB\-mno\-abicalls\fR
Disable SVR4\-style position\-independent code (Mips only)
.TP
\fB\-mno\-fix\-cortex\-a53\-835769\fR
Don't workaround Cortex\-A53 erratum 835769 (AArch64 only)
.TP
\fB\-mno\-global\-merge\fR
Disable merging of globals
.TP
\fB\-mno\-hvx\-double\fR
Disable Hexagon Double Vector eXtensions
.TP
\fB\-mno\-hvx\fR
Disable Hexagon Vector eXtensions
.TP
\fB\-mno\-implicit\-float\fR
Don't generate implicit floating point instructions
.TP
\fB\-mno\-incremental\-linker\-compatible\fR
(integrated\-as) Emit an object file which cannot be used with an incremental linker
.TP
\fB\-mno\-long\-calls\fR
Restore the default behaviour of not generating long calls
.TP
\fB\-mno\-movt\fR
Disallow use of movt/movw pairs (ARM only)
.TP
\fB\-mno\-ms\-bitfields\fR
Do not set the default structure layout to be compatible with the Microsoft compiler standard
.TP
\fB\-mno\-msa\fR
Disable MSA ASE (MIPS only)
.TP
\fB\-mno\-restrict\-it\fR
Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode
.TP
\fB\-mno\-unaligned\-access\fR
Force all memory accesses to be aligned (AArch32/AArch64 only)
.TP
\fB\-mnocrc\fR
Disallow use of CRC instructions (ARM only)
.TP
\fB\-module\-dependency\-dir\fR <value>
Directory to dump module dependencies to
.TP
\fB\-momit\-leaf\-frame\-pointer\fR
Omit frame pointer setup for leaf functions
.TP
\fB\-MP\fR
Create phony target for each dependency (other than main file)
.TP
\fB\-mqdsp6\-compat\fR
Enable hexagon\-qdsp6 backward compatibility
.TP
\fB\-MQ\fR <value>
Specify name of main file output to quote in depfile
.TP
\fB\-mrelax\-all\fR
(integrated\-as) Relax all machine instructions
.TP
\fB\-mrestrict\-it\fR
Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.
.TP
\fB\-mrtd\fR
Make StdCall calling convention the default
.TP
\fB\-msoft\-float\fR
Use software floating point
.TP
\fB\-mstack\-alignment=\fR<value>
Set the stack alignment
.TP
\fB\-mstack\-probe\-size=\fR<value>
Set the stack probe size
.TP
\fB\-mstackrealign\fR
Force realign the stack at entry to every function
.TP
\fB\-mthread\-model\fR <value>
The thread model to use, e.g. posix, single (posix by default)
.TP
\fB\-MT\fR <value>
Specify name of main file output in depfile
.TP
\fB\-munaligned\-access\fR
Allow memory accesses to be unaligned (AArch32/AArch64 only)
.TP
\fB\-MV\fR
Use NMake/Jom format for the depfile
.TP
\fB\-M\fR
Like \fB\-MD\fR, but also implies \fB\-E\fR and writes to stdout by default
.HP
\fB\-\-no\-cuda\-version\-check\fR Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
.TP
\fB\-\-no\-system\-header\-prefix=\fR<prefix>
Treat all #include paths starting with <prefix> as not including a system header.
.TP
\fB\-nobuiltininc\fR
Disable builtin #include directories
.TP
\fB\-nostdinc\fR++
Disable standard #include directories for the C++ standard library
.TP
\fB\-ObjC\fR++
Treat source input files as Objective\-C++ inputs
.HP
\fB\-objcmt\-atomic\-property\fR Make migration to 'atomic' properties
.TP
\fB\-objcmt\-migrate\-all\fR
Enable migration to modern ObjC
.TP
\fB\-objcmt\-migrate\-annotation\fR
Enable migration to property and method annotations
.TP
\fB\-objcmt\-migrate\-designated\-init\fR
Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
.TP
\fB\-objcmt\-migrate\-instancetype\fR
Enable migration to infer instancetype for method result type
.TP
\fB\-objcmt\-migrate\-literals\fR
Enable migration to modern ObjC literals
.TP
\fB\-objcmt\-migrate\-ns\-macros\fR
Enable migration to NS_ENUM/NS_OPTIONS macros
.TP
\fB\-objcmt\-migrate\-property\-dot\-syntax\fR
Enable migration of setter/getter messages to property\-dot syntax
.TP
\fB\-objcmt\-migrate\-property\fR
Enable migration to modern ObjC property
.TP
\fB\-objcmt\-migrate\-protocol\-conformance\fR
Enable migration to add protocol conformance on classes
.TP
\fB\-objcmt\-migrate\-readonly\-property\fR
Enable migration to modern ObjC readonly property
.TP
\fB\-objcmt\-migrate\-readwrite\-property\fR
Enable migration to modern ObjC readwrite property
.TP
\fB\-objcmt\-migrate\-subscripting\fR
Enable migration to modern ObjC subscripting
.TP
\fB\-objcmt\-ns\-nonatomic\-iosonly\fR
Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
.TP
\fB\-objcmt\-returns\-innerpointer\-property\fR
Enable migration to annotate property with NS_RETURNS_INNER_POINTER
.TP
\fB\-objcmt\-whitelist\-dir\-path=\fR<value>
Only modify files with a filename contained in the provided directory path
.TP
\fB\-ObjC\fR
Treat source input files as Objective\-C inputs
.TP
\fB\-o\fR <file>
Write output to <file>
.TP
\fB\-pg\fR
Enable mcount instrumentation
.TP
\fB\-pipe\fR
Use pipes between commands, when possible
.HP
\fB\-print\-file\-name=\fR<file> Print the full library path of <file>
.TP
\fB\-print\-ivar\-layout\fR
Enable Objective\-C Ivar layout bitmap print trace
.HP
\fB\-print\-libgcc\-file\-name\fR Print the library path for "libgcc.a"
.HP
\fB\-print\-prog\-name=\fR<name> Print the full program path of <name>
.TP
\fB\-print\-search\-dirs\fR
Print the paths used for finding libraries and programs
.TP
\fB\-pthread\fR
Support POSIX threads in generated code
.TP
\fB\-P\fR
Disable linemarker output in \fB\-E\fR mode
.TP
\fB\-Qunused\-arguments\fR
Don't emit warning for unused driver arguments
.TP
\fB\-relocatable\-pch\fR
Whether to build a relocatable precompiled header
.TP
\fB\-rewrite\-legacy\-objc\fR
Rewrite Legacy Objective\-C source to C++
.TP
\fB\-rewrite\-objc\fR
Rewrite Objective\-C source to C++
.HP
\fB\-Rpass\-analysis=\fR<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
.TP
\fB\-Rpass\-missed=\fR<value>
Report missed transformations by optimization passes whose name matches the given POSIX regular expression
.TP
\fB\-Rpass=\fR<value>
Report transformations performed by optimization passes whose name matches the given POSIX regular expression
.TP
\fB\-R\fR<remark>
Enable the specified remark
.TP
\fB\-save\-temps=\fR<value>
Save intermediate compilation results.
.TP
\fB\-save\-temps\fR
Save intermediate compilation results
.TP
\fB\-serialize\-diagnostics\fR <value>
Serialize compiler diagnostics to a file
.TP
\fB\-std=\fR<value>
Language standard to compile for
.TP
\fB\-stdlib=\fR<value>
C++ standard library to use
.TP
\fB\-\-system\-header\-prefix=\fR<prefix>
Treat all #include paths starting with <prefix> as including a system header.
.TP
\fB\-S\fR
Only run preprocess and compilation steps
.TP
\fB\-\-target=\fR<value>
Generate code for the given target
.TP
\fB\-time\fR
Time individual commands
.TP
\fB\-traditional\-cpp\fR
Enable some traditional CPP emulation
.TP
\fB\-trigraphs\fR
Process trigraph sequences
.TP
\fB\-undef\fR
undef all system defines
.TP
\fB\-\-verify\-debug\-info\fR
Verify the binary representation of debug output
.TP
\fB\-verify\-pch\fR
Load and verify that a pre\-compiled header file is not stale
.TP
\fB\-v\fR
Show commands to run and use verbose output
.TP
\fB\-Wa\fR,<arg>
Pass the comma separated arguments in <arg> to the assembler
.TP
\fB\-Wl\fR,<arg>
Pass the comma separated arguments in <arg> to the linker
.TP
\fB\-working\-directory\fR <value>
Resolve file paths relative to the specified directory
.TP
\fB\-Wp\fR,<arg>
Pass the comma separated arguments in <arg> to the preprocessor
.TP
\fB\-W\fR<warning>
Enable the specified warning
.TP
\fB\-w\fR
Suppress all warnings
.TP
\fB\-Xanalyzer\fR <arg>
Pass <arg> to the static analyzer
.TP
\fB\-Xassembler\fR <arg>
Pass <arg> to the assembler
.TP
\fB\-Xclang\fR <arg>
Pass <arg> to the clang compiler
.TP
\fB\-Xcuda\-fatbinary\fR <arg>
Pass <arg> to fatbinary invocation
.TP
\fB\-Xcuda\-ptxas\fR <arg>
Pass <arg> to the ptxas assembler
.TP
\fB\-Xlinker\fR <arg>
Pass <arg> to the linker
.TP
\fB\-Xpreprocessor\fR <arg>
Pass <arg> to the preprocessor
.TP
\fB\-x\fR <language>
Treat subsequent input files as having type <language>
.TP
\fB\-z\fR <arg>
Pass \fB\-z\fR <arg> to the linker
.SH "SEE ALSO"
The full documentation for
.B clang
is maintained as a Texinfo manual.  If the
.B info
and
.B clang
programs are properly installed at your site, the command
.IP
.B info clang
.PP
should give you access to the complete manual.
